<?xml version="1.0" encoding="UTF-8" ?>
<class name="Theme" inherits="Resource" version="4.0">
	<brief_description>
		Theme for controls.
	</brief_description>
	<description>
		A theme for skinning controls. Controls can be skinned individually, but for complex applications, it's more practical to just create a global theme that defines everything. This theme can be applied to any [Control]; the Control and its children will automatically use it.
		Theme resources can alternatively be loaded by writing them in a [code].theme[/code] file, see the documentation for more information.
	</description>
	<tutorials>
		<link title="GUI skinning">https://docs.godotengine.org/en/latest/tutorials/gui/gui_skinning.html</link>
	</tutorials>
	<methods>
		<method name="clear">
			<return type="void">
			</return>
			<description>
				Clears all values on the theme.
			</description>
		</method>
		<method name="clear_color">
			<return type="void">
			</return>
			<argument index="0" name="name" type="StringName">
			</argument>
			<argument index="1" name="node_type" type="StringName">
			</argument>
			<description>
				Clears the [Color] at [code]name[/code] if the theme has [code]node_type[/code].
			</description>
		</method>
		<method name="clear_constant">
			<return type="void">
			</return>
			<argument index="0" name="name" type="StringName">
			</argument>
			<argument index="1" name="node_type" type="StringName">
			</argument>
			<description>
				Clears the constant at [code]name[/code] if the theme has [code]node_type[/code].
			</description>
		</method>
		<method name="clear_font">
			<return type="void">
			</return>
			<argument index="0" name="name" type="StringName">
			</argument>
			<argument index="1" name="node_type" type="StringName">
			</argument>
			<description>
				Clears the [Font] at [code]name[/code] if the theme has [code]node_type[/code].
			</description>
		</method>
		<method name="clear_font_size">
			<return type="void">
			</return>
			<argument index="0" name="name" type="StringName">
			</argument>
			<argument index="1" name="node_type" type="StringName">
			</argument>
			<description>
				Clears the font size [code]name[/code] if the theme has [code]node_type[/code].
			</description>
		</method>
		<method name="clear_icon">
			<return type="void">
			</return>
			<argument index="0" name="name" type="StringName">
			</argument>
			<argument index="1" name="node_type" type="StringName">
			</argument>
			<description>
				Clears the icon at [code]name[/code] if the theme has [code]node_type[/code].
			</description>
		</method>
		<method name="clear_stylebox">
			<return type="void">
			</return>
			<argument index="0" name="name" type="StringName">
			</argument>
			<argument index="1" name="node_type" type="StringName">
			</argument>
			<description>
				Clears [StyleBox] at [code]name[/code] if the theme has [code]node_type[/code].
			</description>
		</method>
		<method name="copy_default_theme">
			<return type="void">
			</return>
			<description>
				Sets the theme's values to a copy of the default theme values.
			</description>
		</method>
		<method name="copy_theme">
			<return type="void">
			</return>
			<argument index="0" name="other" type="Theme">
			</argument>
			<description>
				Sets the theme's values to a copy of a given theme.
			</description>
		</method>
		<method name="get_color" qualifiers="const">
			<return type="Color">
			</return>
			<argument index="0" name="name" type="StringName">
			</argument>
			<argument index="1" name="node_type" type="StringName">
			</argument>
			<description>
				Returns the [Color] at [code]name[/code] if the theme has [code]node_type[/code].
			</description>
		</method>
		<method name="get_color_list" qualifiers="const">
			<return type="PackedStringArray">
			</return>
			<argument index="0" name="node_type" type="String">
			</argument>
			<description>
				Returns all the [Color]s as a [PackedStringArray] filled with each [Color]'s name, for use in [method get_color], if the theme has [code]node_type[/code].
			</description>
		</method>
		<method name="get_color_type_list" qualifiers="const">
			<return type="PackedStringArray">
			</return>
			<description>
				Returns all the [Color] types as a [PackedStringArray] filled with unique type names, for use in [method get_color] and/or [method get_color_list].
			</description>
		</method>
		<method name="get_constant" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="name" type="StringName">
			</argument>
			<argument index="1" name="node_type" type="StringName">
			</argument>
			<description>
				Returns the constant at [code]name[/code] if the theme has [code]node_type[/code].
			</description>
		</method>
		<method name="get_constant_list" qualifiers="const">
			<return type="PackedStringArray">
			</return>
			<argument index="0" name="node_type" type="String">
			</argument>
			<description>
				Returns all the constants as a [PackedStringArray] filled with each constant's name, for use in [method get_constant], if the theme has [code]node_type[/code].
			</description>
		</method>
		<method name="get_constant_type_list" qualifiers="const">
			<return type="PackedStringArray">
			</return>
			<description>
				Returns all the constant types as a [PackedStringArray] filled with unique type names, for use in [method get_constant] and/or [method get_constant_list].
			</description>
		</method>
		<method name="get_font" qualifiers="const">
			<return type="Font">
			</return>
			<argument index="0" name="name" type="StringName">
			</argument>
			<argument index="1" name="node_type" type="StringName">
			</argument>
			<description>
				Returns the [Font] at [code]name[/code] if the theme has [code]node_type[/code].
			</description>
		</method>
		<method name="get_font_list" qualifiers="const">
			<return type="PackedStringArray">
			</return>
			<argument index="0" name="node_type" type="String">
			</argument>
			<description>
				Returns all the [Font]s as a [PackedStringArray] filled with each [Font]'s name, for use in [method get_font], if the theme has [code]node_type[/code].
			</description>
		</method>
		<method name="get_font_size" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="name" type="StringName">
			</argument>
			<argument index="1" name="node_type" type="StringName">
			</argument>
			<description>
				Returns the font size at [code]name[/code] if the theme has [code]node_type[/code].
			</description>
		</method>
		<method name="get_font_size_list" qualifiers="const">
			<return type="PackedStringArray">
			</return>
			<argument index="0" name="node_type" type="String">
			</argument>
			<description>
				Returns all the font sizes as a [PackedStringArray] filled with each font size name, for use in [method get_font_size], if the theme has [code]node_type[/code].
			</description>
		</method>
		<method name="get_font_type_list" qualifiers="const">
			<return type="PackedStringArray">
			</return>
			<description>
				Returns all the [Font] types as a [PackedStringArray] filled with unique type names, for use in [method get_font] and/or [method get_font_list].
			</description>
		</method>
		<method name="get_icon" qualifiers="const">
			<return type="Texture2D">
			</return>
			<argument index="0" name="name" type="StringName">
			</argument>
			<argument index="1" name="node_type" type="StringName">
			</argument>
			<description>
				Returns the icon [Texture2D] at [code]name[/code] if the theme has [code]node_type[/code].
			</description>
		</method>
		<method name="get_icon_list" qualifiers="const">
			<return type="PackedStringArray">
			</return>
			<argument index="0" name="node_type" type="String">
			</argument>
			<description>
				Returns all the icons as a [PackedStringArray] filled with each [Texture2D]'s name, for use in [method get_icon], if the theme has [code]node_type[/code].
			</description>
		</method>
		<method name="get_icon_type_list" qualifiers="const">
			<return type="PackedStringArray">
			</return>
			<description>
				Returns all the icon types as a [PackedStringArray] filled with unique type names, for use in [method get_icon] and/or [method get_icon_list].
			</description>
		</method>
		<method name="get_stylebox" qualifiers="const">
			<return type="StyleBox">
			</return>
			<argument index="0" name="name" type="StringName">
			</argument>
			<argument index="1" name="node_type" type="StringName">
			</argument>
			<description>
				Returns the icon [StyleBox] at [code]name[/code] if the theme has [code]node_type[/code].
			</description>
		</method>
		<method name="get_stylebox_list" qualifiers="const">
			<return type="PackedStringArray">
			</return>
			<argument index="0" name="node_type" type="String">
			</argument>
			<description>
				Returns all the [StyleBox]s as a [PackedStringArray] filled with each [StyleBox]'s name, for use in [method get_stylebox], if the theme has [code]node_type[/code].
			</description>
		</method>
		<method name="get_stylebox_type_list" qualifiers="const">
			<return type="PackedStringArray">
			</return>
			<description>
				Returns all the [StyleBox] types as a [PackedStringArray] filled with unique type names, for use in [method get_stylebox] and/or [method get_stylebox_list].
			</description>
		</method>
		<method name="get_type_list" qualifiers="const">
			<return type="PackedStringArray">
			</return>
			<description>
				Returns all the theme types as a [PackedStringArray] filled with unique type names, for use in other [code]get_*[/code] functions of this theme.
			</description>
		</method>
		<method name="has_color" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="name" type="StringName">
			</argument>
			<argument index="1" name="node_type" type="StringName">
			</argument>
			<description>
				Returns [code]true[/code] if [Color] with [code]name[/code] is in [code]node_type[/code].
				Returns [code]false[/code] if the theme does not have [code]node_type[/code].
			</description>
		</method>
		<method name="has_constant" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="name" type="StringName">
			</argument>
			<argument index="1" name="node_type" type="StringName">
			</argument>
			<description>
				Returns [code]true[/code] if constant with [code]name[/code] is in [code]node_type[/code].
				Returns [code]false[/code] if the theme does not have [code]node_type[/code].
			</description>
		</method>
		<method name="has_font" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="name" type="StringName">
			</argument>
			<argument index="1" name="node_type" type="StringName">
			</argument>
			<description>
				Returns [code]true[/code] if [Font] with [code]name[/code] is in [code]node_type[/code].
				Returns [code]false[/code] if the theme does not have [code]node_type[/code].
			</description>
		</method>
		<method name="has_font_size" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="name" type="StringName">
			</argument>
			<argument index="1" name="node_type" type="StringName">
			</argument>
			<description>
				Returns [code]true[/code] if font size with [code]name[/code] is in [code]node_type[/code].
				Returns [code]false[/code] if the theme does not have [code]node_type[/code].
			</description>
		</method>
		<method name="has_icon" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="name" type="StringName">
			</argument>
			<argument index="1" name="node_type" type="StringName">
			</argument>
			<description>
				Returns [code]true[/code] if icon [Texture2D] with [code]name[/code] is in [code]node_type[/code].
				Returns [code]false[/code] if the theme does not have [code]node_type[/code].
			</description>
		</method>
		<method name="has_stylebox" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="name" type="StringName">
			</argument>
			<argument index="1" name="node_type" type="StringName">
			</argument>
			<description>
				Returns [code]true[/code] if [StyleBox] with [code]name[/code] is in [code]node_type[/code].
				Returns [code]false[/code] if the theme does not have [code]node_type[/code].
			</description>
		</method>
		<method name="set_color">
			<return type="void">
			</return>
			<argument index="0" name="name" type="StringName">
			</argument>
			<argument index="1" name="node_type" type="StringName">
			</argument>
			<argument index="2" name="color" type="Color">
			</argument>
			<description>
				Sets the theme's [Color] to [code]color[/code] at [code]name[/code] in [code]node_type[/code].
				Does nothing if the theme does not have [code]node_type[/code].
			</description>
		</method>
		<method name="set_constant">
			<return type="void">
			</return>
			<argument index="0" name="name" type="StringName">
			</argument>
			<argument index="1" name="node_type" type="StringName">
			</argument>
			<argument index="2" name="constant" type="int">
			</argument>
			<description>
				Sets the theme's constant to [code]constant[/code] at [code]name[/code] in [code]node_type[/code].
				Does nothing if the theme does not have [code]node_type[/code].
			</description>
		</method>
		<method name="set_font">
			<return type="void">
			</return>
			<argument index="0" name="name" type="StringName">
			</argument>
			<argument index="1" name="node_type" type="StringName">
			</argument>
			<argument index="2" name="font" type="Font">
			</argument>
			<description>
				Sets the theme's [Font] to [code]font[/code] at [code]name[/code] in [code]node_type[/code].
				Does nothing if the theme does not have [code]node_type[/code].
			</description>
		</method>
		<method name="set_font_size">
			<return type="void">
			</return>
			<argument index="0" name="name" type="StringName">
			</argument>
			<argument index="1" name="node_type" type="StringName">
			</argument>
			<argument index="2" name="font_size" type="int">
			</argument>
			<description>
				Sets the theme's font size to [code]font_size[/code] at [code]name[/code] in [code]node_type[/code].
				Does nothing if the theme does not have [code]node_type[/code].
			</description>
		</method>
		<method name="set_icon">
			<return type="void">
			</return>
			<argument index="0" name="name" type="StringName">
			</argument>
			<argument index="1" name="node_type" type="StringName">
			</argument>
			<argument index="2" name="texture" type="Texture2D">
			</argument>
			<description>
				Sets the theme's icon [Texture2D] to [code]texture[/code] at [code]name[/code] in [code]node_type[/code].
				Does nothing if the theme does not have [code]node_type[/code].
			</description>
		</method>
		<method name="set_stylebox">
			<return type="void">
			</return>
			<argument index="0" name="name" type="StringName">
			</argument>
			<argument index="1" name="node_type" type="StringName">
			</argument>
			<argument index="2" name="texture" type="StyleBox">
			</argument>
			<description>
				Sets theme's [StyleBox] to [code]stylebox[/code] at [code]name[/code] in [code]node_type[/code].
				Does nothing if the theme does not have [code]node_type[/code].
			</description>
		</method>
	</methods>
	<members>
		<member name="default_font" type="Font" setter="set_default_font" getter="get_default_font">
			The theme's default font.
		</member>
		<member name="default_font_size" type="int" setter="set_default_font_size" getter="get_default_font_size" default="-1">
			The theme's default font size. Set to [code]-1[/code] to ignore and use global default.
		</member>
	</members>
	<constants>
	</constants>
</class>
